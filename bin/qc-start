#!/bin/bash

# QC Standards App - Enhanced Global Terminal Command for Codespaces
# This script can be run from anywhere in the terminal with improved error handling

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Navigate to the project directory
cd /workspaces/qc-standards-app

echo -e "${GREEN}üöÄ Starting QC Standards App in Codespaces...${NC}"
echo "=================================================="

# Function to wait for service to be ready
wait_for_service() {
    local service_name=$1
    local host=$2
    local port=$3
    local max_attempts=30
    local attempt=1

    echo -e "${YELLOW}‚è≥ Waiting for $service_name to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z $host $port 2>/dev/null; then
            echo -e "${GREEN}‚úÖ $service_name is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 5)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++))
    done
    
    echo -e "${RED}‚ùå $service_name failed to start within expected time${NC}"
    return 1
}

# Function to check PostgreSQL using docker exec
wait_for_postgres() {
    local max_attempts=30
    local attempt=1

    echo -e "${YELLOW}‚è≥ Waiting for PostgreSQL to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if docker exec qc-standards-app-db-1 pg_isready -U postgres >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ PostgreSQL is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 5)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++))
    done
    
    echo -e "${RED}‚ùå PostgreSQL failed to start within expected time${NC}"
    return 1
}

# Function to check if a process is running
is_process_running() {
    local port=$1
    lsof -ti:$port >/dev/null 2>&1
}

# Stop any existing processes
echo -e "${YELLOW}üßπ Cleaning up existing processes...${NC}"
if is_process_running 8000; then
    echo "Stopping existing backend process..."
    lsof -ti:8000 | xargs kill -9 2>/dev/null || true
fi

if is_process_running 5173; then
    echo "Stopping existing frontend process..."
    lsof -ti:5173 | xargs kill -9 2>/dev/null || true
fi

# Ensure .env file exists
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}üìÑ Creating .env file...${NC}"
    cp .env.example .env
fi

# Start databases with health checks
echo -e "${YELLOW}üì¶ Starting database services...${NC}"
docker-compose -f docker-compose.dev.yml up -d db redis

# Wait for databases to be ready with improved error handling
wait_for_postgres || {
    echo -e "${RED}‚ùå PostgreSQL failed to start. Checking logs...${NC}"
    docker-compose -f docker-compose.dev.yml logs db | tail -20
    echo -e "${YELLOW}üí° But let's try to continue anyway - PostgreSQL might still work...${NC}"
}

wait_for_service "Redis" "localhost" "6379" || {
    echo -e "${RED}‚ùå Redis failed to start. Checking logs...${NC}"
    docker-compose -f docker-compose.dev.yml logs redis
    echo -e "${YELLOW}üí° Continuing without Redis - app should still work...${NC}"
}

# Start backend with better error handling
echo -e "${YELLOW}üîß Starting FastAPI backend...${NC}"
cd backend

# Check if requirements are installed
if [ ! -f ".deps_installed" ]; then
    echo -e "${YELLOW}üì¶ Installing Python dependencies...${NC}"
    pip install -r requirements.txt
    touch .deps_installed
fi

# Start backend
nohup uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > /tmp/backend.log 2>&1 &
BACKEND_PID=$!
echo "Backend PID: $BACKEND_PID"

# Start frontend with better error handling
echo -e "${YELLOW}‚öõÔ∏è  Starting React frontend...${NC}"
cd ../frontend

# Check if node_modules exist
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}üì¶ Installing Node.js dependencies...${NC}"
    npm install
fi

# Start frontend
nohup npm run dev -- --host 0.0.0.0 --port 5173 > /tmp/frontend.log 2>&1 &
FRONTEND_PID=$!
echo "Frontend PID: $FRONTEND_PID"

cd ..

# Wait for services to start with health checks
echo -e "${YELLOW}‚è≥ Waiting for services to be ready...${NC}"
sleep 5

# Check if backend is responding
if wait_for_service "Backend API" "localhost" "8000"; then
    echo -e "${GREEN}‚úÖ Backend is ready!${NC}"
else
    echo -e "${RED}‚ùå Backend failed to start. Check logs:${NC}"
    echo "tail -f /tmp/backend.log"
    exit 1
fi

# Check if frontend is responding
if wait_for_service "Frontend" "localhost" "5173"; then
    echo -e "${GREEN}‚úÖ Frontend is ready!${NC}"
else
    echo -e "${RED}‚ùå Frontend failed to start. Check logs:${NC}"
    echo "tail -f /tmp/frontend.log"
    exit 1
fi

echo ""
echo -e "${GREEN}üéâ QC Standards App is running successfully!${NC}"
echo "=================================================="
echo -e "${BLUE}üåê Service URLs:${NC}"
echo "   Frontend:     http://localhost:5173"
echo "   Backend API:  http://localhost:8000"
echo "   API Docs:     http://localhost:8000/api/docs"
echo ""
echo -e "${BLUE}üìä Monitor logs:${NC}"
echo "   Backend:      tail -f /tmp/backend.log"
echo "   Frontend:     tail -f /tmp/frontend.log"
echo "   All services: docker-compose -f docker-compose.dev.yml logs -f"
echo ""
echo -e "${BLUE}üõë To stop services:${NC}"
echo "   Quick stop:   docker-compose -f docker-compose.dev.yml down"
echo "   Kill all:     lsof -ti:8000,5173 | xargs kill -9"
echo ""
echo -e "${GREEN}‚ú® Access your app through the forwarded ports in VS Code!${NC}"
echo ""