#!/bin/bash

# QC Standards App - Enhanced Global Terminal Command for Codespaces
# This script can be run from anywhere in the terminal with improved error handling

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Navigate to the project directory
cd /workspaces/qc-standards-app

echo -e "${GREEN}🚀 Starting QC Standards App in Codespaces...${NC}"
echo "=================================================="

# Function to wait for service to be ready (for ports that work with nc)
wait_for_service() {
    local service_name=$1
    local host=$2
    local port=$3
    local max_attempts=15
    local attempt=1

    echo -e "${YELLOW}⏳ Waiting for $service_name to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z $host $port 2>/dev/null; then
            echo -e "${GREEN}✅ $service_name is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 3)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++))
    done
    
    echo -e "${YELLOW}⚠️  $service_name connection test failed, but continuing...${NC}"
    return 0  # Don't fail, just warn
}

# Function to check PostgreSQL using docker-compose
wait_for_postgres() {
    local max_attempts=20
    local attempt=1

    echo -e "${YELLOW}⏳ Waiting for PostgreSQL to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        # Try docker-compose exec first, then docker exec as fallback
        if docker-compose -f docker-compose.dev.yml exec -T db pg_isready -U postgres >/dev/null 2>&1; then
            echo -e "${GREEN}✅ PostgreSQL is ready!${NC}"
            return 0
        elif docker exec qc-standards-app-db-1 pg_isready -U postgres >/dev/null 2>&1; then
            echo -e "${GREEN}✅ PostgreSQL is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 5)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++))
    done
    
    echo -e "${YELLOW}⚠️  PostgreSQL readiness check failed, but PostgreSQL might still work${NC}"
    return 0  # Don't fail, just warn
}

# Function to check if a process is running
is_process_running() {
    local port=$1
    lsof -ti:$port >/dev/null 2>&1
}

# Stop any existing processes
echo -e "${YELLOW}🧹 Cleaning up existing processes...${NC}"
if is_process_running 8000; then
    echo "Stopping existing backend process..."
    lsof -ti:8000 | xargs kill -9 2>/dev/null || true
fi

if is_process_running 5173; then
    echo "Stopping existing frontend process..."
    lsof -ti:5173 | xargs kill -9 2>/dev/null || true
fi

# Ensure .env file exists
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}📄 Creating .env file...${NC}"
    cp .env.example .env
fi

# Start databases
echo -e "${YELLOW}📦 Starting database services...${NC}"
docker-compose -f docker-compose.dev.yml up -d db redis

# Give services time to start
echo -e "${YELLOW}⏳ Giving services time to initialize...${NC}"
sleep 10

# Check PostgreSQL with improved method
wait_for_postgres

# Check Redis with graceful degradation
wait_for_service "Redis" "localhost" "6379"

# Start backend with better error handling
echo -e "${YELLOW}🔧 Starting FastAPI backend...${NC}"
cd backend

# Check if requirements are installed
if [ ! -f ".deps_installed" ]; then
    echo -e "${YELLOW}📦 Installing Python dependencies...${NC}"
    pip install -r requirements.txt
    touch .deps_installed
fi

# Start backend
nohup uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > /tmp/backend.log 2>&1 &
BACKEND_PID=$!
echo "Backend PID: $BACKEND_PID"

# Start frontend with better error handling
echo -e "${YELLOW}⚛️  Starting React frontend...${NC}"
cd ../frontend

# Check if node_modules exist
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}📦 Installing Node.js dependencies...${NC}"
    npm install
fi

# Start frontend
nohup npm run dev -- --host 0.0.0.0 --port 5173 > /tmp/frontend.log 2>&1 &
FRONTEND_PID=$!
echo "Frontend PID: $FRONTEND_PID"

cd ..

# Wait for services to start
echo -e "${YELLOW}⏳ Waiting for application services to be ready...${NC}"
sleep 8

# Check if backend is responding with more attempts
backend_ready=false
for i in {1..10}; do
    if curl -s http://localhost:8000/health >/dev/null 2>&1 || nc -z localhost 8000 2>/dev/null; then
        echo -e "${GREEN}✅ Backend is ready!${NC}"
        backend_ready=true
        break
    fi
    sleep 2
done

if [ "$backend_ready" = false ]; then
    echo -e "${YELLOW}⚠️  Backend readiness check failed, but it might still be starting...${NC}"
    echo -e "${BLUE}📊 Check backend logs: tail -f /tmp/backend.log${NC}"
fi

# Check if frontend is responding with more attempts
frontend_ready=false
for i in {1..10}; do
    if nc -z localhost 5173 2>/dev/null; then
        echo -e "${GREEN}✅ Frontend is ready!${NC}"
        frontend_ready=true
        break
    fi
    sleep 2
done

if [ "$frontend_ready" = false ]; then
    echo -e "${YELLOW}⚠️  Frontend readiness check failed, but it might still be starting...${NC}"
    echo -e "${BLUE}📊 Check frontend logs: tail -f /tmp/frontend.log${NC}"
fi

echo ""
echo -e "${GREEN}🎉 QC Standards App startup completed!${NC}"
echo "=================================================="
echo -e "${BLUE}🌐 Service URLs:${NC}"
echo "   Frontend:     http://localhost:5173"
echo "   Backend API:  http://localhost:8000"
echo "   API Docs:     http://localhost:8000/api/docs"
echo ""
echo -e "${BLUE}📊 Monitor logs:${NC}"
echo "   Backend:      tail -f /tmp/backend.log"
echo "   Frontend:     tail -f /tmp/frontend.log"
echo "   All services: docker-compose -f docker-compose.dev.yml logs -f"
echo ""
echo -e "${BLUE}🛑 To stop services:${NC}"
echo "   Quick stop:   docker-compose -f docker-compose.dev.yml down"
echo "   Kill all:     lsof -ti:8000,5173 | xargs kill -9"
echo ""
echo -e "${GREEN}✨ Access your app through the forwarded ports in VS Code!${NC}"
echo -e "${YELLOW}💡 If services didn't start, check the logs above and try again.${NC}"
echo ""