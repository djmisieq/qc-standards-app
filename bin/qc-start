#!/bin/bash

# QC Standards App - Enhanced Global Terminal Command for Codespaces
# This script can be run from anywhere in the terminal with improved error handling

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Navigate to the project directory
cd /workspaces/qc-standards-app

# Parse command line arguments
CLEAN_MODE=false
MINIMAL_MODE=false
FORCE_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --clean)
            CLEAN_MODE=true
            shift
            ;;
        --minimal)
            MINIMAL_MODE=true
            shift
            ;;
        --force)
            FORCE_MODE=true
            shift
            ;;
        --help)
            echo "Usage: start [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --clean     Deep clean before starting (removes containers, volumes, caches)"
            echo "  --minimal   Start only essential services (database and backend)"
            echo "  --force     Force restart all services"
            echo "  --help      Show this help message"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo -e "${GREEN}üöÄ Starting QC Standards App in Codespaces...${NC}"
echo "=================================================="

# Function to check system resources
check_resources() {
    echo -e "${BLUE}üìä System Resources:${NC}"
    echo -n "   Memory: "
    free -h | grep Mem | awk '{printf "%s/%s (%.0f%% used)\n", $3, $2, ($3/$2)*100}'
    echo -n "   CPU cores: "
    nproc
    echo -n "   Disk space: "
    df -h / | tail -1 | awk '{printf "%s/%s (%s used)\n", $3, $2, $5}'
    echo ""
}

# Function to clean resources
clean_resources() {
    echo -e "${YELLOW}üßπ Cleaning up resources...${NC}"
    
    # Stop all processes using our ports
    echo "   Stopping processes on ports..."
    for port in 8000 5173 5432 6379; do
        if lsof -ti:$port >/dev/null 2>&1; then
            echo "   - Killing processes on port $port"
            lsof -ti:$port | xargs kill -9 2>/dev/null || true
        fi
    done
    
    # Stop and remove Docker containers
    echo "   Stopping Docker containers..."
    docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
    
    if [ "$CLEAN_MODE" = true ]; then
        echo -e "${YELLOW}üßΩ Deep cleaning mode activated...${NC}"
        
        # Remove volumes
        echo "   Removing Docker volumes..."
        docker-compose -f docker-compose.dev.yml down -v 2>/dev/null || true
        
        # Clean Docker system
        echo "   Cleaning Docker system..."
        docker system prune -f 2>/dev/null || true
        
        # Clean npm cache
        if [ -d "frontend" ]; then
            echo "   Cleaning npm cache..."
            cd frontend
            npm cache clean --force 2>/dev/null || true
            rm -rf node_modules package-lock.json 2>/dev/null || true
            cd ..
        fi
        
        # Clean Python cache
        echo "   Cleaning Python cache..."
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete 2>/dev/null || true
        pip cache purge 2>/dev/null || true
        
        # Remove marker files
        rm -f backend/.deps_installed 2>/dev/null || true
    fi
    
    sleep 2
}

# Function to wait for service to be ready
wait_for_service() {
    local service_name=$1
    local host=$2
    local port=$3
    local max_attempts=15
    local attempt=1

    echo -e "${YELLOW}‚è≥ Waiting for $service_name to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z $host $port 2>/dev/null; then
            echo -e "${GREEN}‚úÖ $service_name is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 3)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++)
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  $service_name connection test failed, but continuing...${NC}"
    return 0
}

# Function to check PostgreSQL
wait_for_postgres() {
    local max_attempts=20
    local attempt=1

    echo -e "${YELLOW}‚è≥ Waiting for PostgreSQL to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if docker-compose -f docker-compose.dev.yml exec -T db pg_isready -U postgres >/dev/null 2>&1 || \
           docker exec qc-standards-app-db-1 pg_isready -U postgres >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ PostgreSQL is ready!${NC}"
            return 0
        fi
        
        if [ $((attempt % 5)) -eq 0 ]; then
            echo "   Still waiting... ($attempt/$max_attempts)"
        fi
        sleep 2
        ((attempt++)
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  PostgreSQL readiness check failed, but PostgreSQL might still work${NC}"
    return 0
}

# Function to monitor resources during startup
monitor_resources() {
    local service=$1
    echo -e "${PURPLE}üìà Resource usage after starting $service:${NC}"
    free -h | grep Mem | awk '{printf "   Memory: %s/%s (%.0f%% used)\n", $3, $2, ($3/$2)*100}'
}

# Main execution starts here
check_resources

# Clean if requested or if force mode
if [ "$CLEAN_MODE" = true ] || [ "$FORCE_MODE" = true ]; then
    clean_resources
else
    # Basic cleanup of processes only
    echo -e "${YELLOW}üßπ Cleaning up existing processes...${NC}"
    for port in 8000 5173; do
        if lsof -ti:$port >/dev/null 2>&1; then
            echo "   Stopping processes on port $port..."
            lsof -ti:$port | xargs kill -9 2>/dev/null || true
        fi
    done
fi

# Ensure .env file exists
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}üìÑ Creating .env file...${NC}"
    cp .env.example .env
fi

# Start databases
echo -e "${YELLOW}üì¶ Starting database services...${NC}"
docker-compose -f docker-compose.dev.yml up -d db redis
monitor_resources "databases"

# Give services time to start
echo -e "${YELLOW}‚è≥ Giving services time to initialize...${NC}"
sleep 10

# Check services
wait_for_postgres
wait_for_service "Redis" "localhost" "6379"

# Start backend
echo -e "${YELLOW}üîß Starting FastAPI backend...${NC}"
cd backend

# Check if requirements are installed
if [ ! -f ".deps_installed" ] || [ "$CLEAN_MODE" = true ]; then
    echo -e "${YELLOW}üì¶ Installing Python dependencies...${NC}"
    pip install -r requirements.txt
    touch .deps_installed
fi

# Start backend
nohup uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > /tmp/backend.log 2>&1 &
BACKEND_PID=$!
echo "Backend PID: $BACKEND_PID"
monitor_resources "backend"

# Start frontend only if not in minimal mode
if [ "$MINIMAL_MODE" = false ]; then
    echo -e "${YELLOW}‚öõÔ∏è  Starting React frontend...${NC}"
    cd ../frontend

    # Check if node_modules exist
    if [ ! -d "node_modules" ] || [ "$CLEAN_MODE" = true ]; then
        echo -e "${YELLOW}üì¶ Installing Node.js dependencies...${NC}"
        npm install
    fi

    # Start frontend
    nohup npm run dev -- --host 0.0.0.0 --port 5173 > /tmp/frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo "Frontend PID: $FRONTEND_PID"
    monitor_resources "frontend"
else
    echo -e "${BLUE}üìù Minimal mode: Skipping frontend startup${NC}"
fi

cd ..

# Wait for services to start
echo -e "${YELLOW}‚è≥ Waiting for application services to be ready...${NC}"
sleep 8

# Check if backend is responding
backend_ready=false
for i in {1..10}; do
    if curl -s http://localhost:8000/health >/dev/null 2>&1 || nc -z localhost 8000 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Backend is ready!${NC}"
        backend_ready=true
        break
    fi
    sleep 2
done

if [ "$backend_ready" = false ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Backend readiness check failed, but it might still be starting...${NC}"
    echo -e "${BLUE}üìä Check backend logs: tail -f /tmp/backend.log${NC}"
fi

# Check frontend only if not in minimal mode
if [ "$MINIMAL_MODE" = false ]; then
    frontend_ready=false
    for i in {1..10}; do
        if nc -z localhost 5173 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Frontend is ready!${NC}"
            frontend_ready=true
            break
        fi
        sleep 2
    done

    if [ "$frontend_ready" = false ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Frontend readiness check failed, but it might still be starting...${NC}"
        echo -e "${BLUE}üìä Check frontend logs: tail -f /tmp/frontend.log${NC}"
    fi
fi

# Final resource check
echo ""
check_resources

echo ""
echo -e "${GREEN}üéâ QC Standards App startup completed!${NC}"
echo "=================================================="
echo -e "${BLUE}üåê Service URLs:${NC}"
if [ "$MINIMAL_MODE" = false ]; then
    echo "   Frontend:     http://localhost:5173"
fi
echo "   Backend API:  http://localhost:8000"
echo "   API Docs:     http://localhost:8000/api/docs"
echo ""
echo -e "${BLUE}üîê Default Admin Credentials:${NC}"
echo "   Username:     admin"
echo "   Password:     admin"
echo ""
echo -e "${BLUE}üìä Monitor logs:${NC}"
echo "   Backend:      tail -f /tmp/backend.log"
if [ "$MINIMAL_MODE" = false ]; then
    echo "   Frontend:     tail -f /tmp/frontend.log"
fi
echo "   All services: docker-compose -f docker-compose.dev.yml logs -f"
echo ""
echo -e "${BLUE}üõë To stop services:${NC}"
echo "   Quick stop:   docker-compose -f docker-compose.dev.yml down"
echo "   Kill all:     lsof -ti:8000,5173 | xargs kill -9"
echo ""
echo -e "${BLUE}üßπ Advanced options:${NC}"
echo "   Deep clean:   start --clean"
echo "   Minimal mode: start --minimal"
echo "   Force restart: start --force"
echo ""
echo -e "${GREEN}‚ú® Access your app through the forwarded ports in VS Code!${NC}"
echo -e "${YELLOW}üí° If services didn't start, check the logs above and try again.${NC}"
echo ""